const querystring = require('querystring')
const request = require('request')
const AccessToken = require('./access_token.js')

const AuthorizeUrl = ' https://qy.weixin.qq.com/cgi-bin/loginpage'
const AccessTokenUrl = 'https://qyapi.weixin.qq.com/cgi-bin/gettoken'
const UserInfoUrl = 'https://qyapi.weixin.qq.com/cgi-bin/service/get_login_info'


const OAuth = function(corpId, corpSecret, getAccessToken, saveAccessToken) {
  if (!corpId || !corpSecret) {
    throw new Error('Wechat Enterprise OAuth requires \'corpId\' and \'corpSecret\'')
  }
  if (!getAccessToken || !saveAccessToken) {
    throw new Error('Wechat Enterprise OAuth requires \'getAccessToken\' and \'saveAccessToken\'')
  }

  if (!(this instanceof OAuth)) {
    return new OAuth(corpId, corpSecret, getAccessToken, saveAccessToken)
  }
  this._corpId = corpId
  this._corpSecret = corpSecret
  this._getAccessToken = getAccessToken
  this._saveAccessToken = saveAccessToken
}


OAuth.prototype.getAuthorizeUrl = function(options) {
  const params = {}
  params['corp_id'] = this._corpId
  params['redirect_uri'] = options.redirect_uri
 //params['response_type'] = 'code'
 // params['scope'] = options.scope || 'snsapi_base'
  params['state'] = options.state || 'state'
params['usertype']=options.usertype||'member'
 console.log('网页授权登陆')
  return AuthorizeUrl + '?' + querystring.stringify(params)
}

OAuth.prototype.getOAuthAccessToken = function(callback) {
  const params = {}
  params['corpid'] = this._corpId
  params['corpsecret'] = this._corpSecret
  const url = AccessTokenUrl + '?' + querystring.stringify(params)
  const self = this
  wechatRequest(url, function(err, result) {
    if (err) {
      return callback(err)
    }
    const accessToken = new AccessToken(result.access_token, result.expires_in, Date.now())
    self._saveAccessToken(accessToken)
    callback(null, accessToken)
  })
}


OAuth.prototype.getAccessToken = function(callback) {
  const self = this
  this._getAccessToken(function(err, accessToken) {
    if (err || !accessToken || accessToken.isExpired()) {
      self.getOAuthAccessToken(callback)
    } else {
      callback(null, accessToken)
    }
  })

}

OAuth.prototype.getUserInfo = function(accessToken, code, callback) {
  const params = {}
  params['access_token'] = accessToken.access_token
  const url = UserInfoUrl + '?' + querystring.stringify(params)
console.log('获取用户信息',url);
  wechatRequest(url,code, callback)
}
function weRequest(url,code,callback) {
var opt={
		method:"POST",
		url:url,
		json:true,
		body:{auth_code:code},
		headers:{
			"Content-Type": 'application/json'
		}
	};  

request(opt, function(err, res, body) {
    if (err){ 
	console.log('用户信息post请求',err);
	return callback(err)}
    var result = null
    try {
      result = JSON.parse(body)
    } catch (e) {
      return callback(e)
    }
    if (result.errcode) return callback(result)
    callback(null, result)
  })
}
function wechatRequest(url, callback) {
  request(url, function(err, res, body) {
    if (err) return callback(err)
    var result = null
    try {
      result = JSON.parse(body)
    } catch (e) {
      return callback(e)
    }
    if (result.errcode) return callback(result)
    callback(null, result)
  })
}

module.exports = OAuth
